<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="kr.co.iei.member.model.dao.MemberDao">

	<!-- 회원가입 -->
	<select id="checkEmail">
		select count(*) from member_tbl where member_email = #{memberEmail}
	</select>
	<select id="checkId">
		select count(*) from member_tbl where member_id = #{memberId}
	</select>
	<insert id="insertMember"> <!-- 회원으로 가입 //멤버쉽은 회원가입시 동일하게 1(nomal)로 들어갈겨-->
		insert into member_tbl values(member_seq.nextval, #{memberId}, #{memberPw},#{memberEmail},#{memberName},to_char(to_date(#{memberBirth}),'YYYY-MM-DD'), #{memberGender}, #{memberPhone},to_char(sysdate, 'yyyy-mm-dd'),2,1)
	</insert>
	<!-- insertMember와 동시에 웰컴쿠폰 발급          // 컬럼 추가 예정-> 수정 필요 -->
	<insert id="wellcomCoupon">
		insert into coupon_box_tbl values(coupon_box_seq.nextval, 1, (select member_no from member_tbl where member_id=#{memberId}), 'n', to_char(sysdate,'YYYY-MM-DD'), to_char(sysdate+365,'YYYY-MM-DD'))
	</insert>
	<!-- 쿠폰 만료시점 자동 소멸 구현 예정 -->
	

	<!-- 로그인 -->
	<select id="login" resultType="member">
		select * from member_tbl where member_id = #{memberId}
	</select>
	
	<!-- 아이디찾기 -->
	<select id="searchId" resultType="string">
		select member_id from member_tbl where member_name = #{memberName} and member_email=#{memberEmail}
	</select>
	
	<!-- 비밀번호찾기 -->
	<select id="searchPw" resultType="int">
		select count(*) from member_tbl where member_name = #{memberName} and member_id = #{memberId} and member_email=#{memberEmail}
	</select>
	<update id="updatePw">
		update member_tbl set
  		member_pw = #{memberPw}
  	where member_email=#{memberEmail}
	</update>
	
	<!-- 내정보 -->
	<select id="selectMember" resultType="member">
		select * from member_tbl where member_id=#{memberId}
	</select>
	<select id="memberCouponCount" resultType="int">
		select count(*) as coupon_no from coupon_box_tbl where member_no=#{memberNo} and use_status='n'
	</select>
	<select id="memberWatchingMovieCount" resultType="int">
		select count(*)
			from book_tbl b
			join book_seat_tbl s on(s.book_no = b.book_no)
			join pay_tbl p on (s.book_seat_no = p.book_seat_no)
		where b.member_no = #{memberNo} p.refund_status = 'n'
	</select>
	<!-- 쿠폰 모달 -->
	<select id="selectCoupon" resultType="coupon">
		select c.coupon_name, c.coupon_disscount, b.coupon_box_issue_dt, b.coupon_box_expire_dt 
			from coupon_tbl c
			join coupon_box_tbl b on (b.coupon_no = c.coupon_no) 
			join member_tbl m on (m.member_no= b.member_no)
			where member_id=#{memberId} and use_status='n'
		order by coupon_box_issue_dt asc
	</select>
	
	<!-- 회원 탈퇴 -->
	<delete id="deleteMember">
		delete from member_tbl where member_id=#{memberId}
	</delete>
	
	<!-- 회원정보 수정 -->
	<update id="updateMember">
		update member_tbl set member_pw=#{memberPw}, member_phone=#{memberPhone}, member_email=#{memberEmail} where member_id=#{memberId}
	</update>
	
	<!-- 관람 완료 영화 -->
	<select id="memberEnrollDate" resultType="String">
		select to_char(to_date(enroll_date),'YYYY.MM.DD') from member_tbl where member_id = #{memberId}
	</select>
	<select id="selectWatchedMovie" resultType="booking">
		<if test="intervalChoice == 0">
		<![CDATA[
			select 
    			mc.comment_content,
    			m.movie_thumb,
    			m.movie_title,
    			m.movie_grade,
    			s.schedule_time_start,
    			s.schedule_time_end,
    			sc.screen_name,
    			pr.price_per_age,
    			b.booking_date,
    			bs.book_seat_row,
    			bs.book_seat_column,
    			p.pay_no
			from member_tbl m
			left join book_tbl b on (b.member_no = m.member_no)
			left join book_seat_tbl bs on (bs.book_no = b.book_no)
			left join pay_tbl p on (p.book_seat_no = bs.book_seat_no)
			left join price_tbl pr on (pr.price_no = b.price_no)
			left join schedule_tbl s on (s.schedule_no = b.schedule_no)
			left join movie_tbl m on(m.movie_no = s.movie_no)
			left join movie_comment_tbl mc on (mc.movie_no = m.movie_no)
			left join screen_tbl sc on (sc.screen_no = s.screen_no)
			where (p.refund_status = 'n') and
        			(b.booking_date <= sysdate) and 
        			(((to_number(to_char(s.schedule_time_end,'hh24'))*60)+(to_number(to_char(s.schedule_time_end,'mi')))) <= ((to_number(to_char(sysdate,'hh24'))*60)+(to_number(to_char(sysdate,'mi')))))
		 ]]>
		</if>
		<if test="intervalChoice == 3 || intervalChoice == 6 || intervalChoice == 9 || intervalChoice == 12">
		<![CDATA[
			select 
    			mc.comment_content,
    			m.movie_thumb,
    			m.movie_title,
    			m.movie_grade,
    			to_char(s.schedule_time_start,'HH24:MI'),
    			to_char(s.schedule_time_end,'HH24:MI'),
    			sc.screen_name,
    			pr.price_per_age,
    			to_char(b.booking_date,'YYYY.DD.MM'),
    			bs.book_seat_row,
    			bs.book_seat_column,
    			p.pay_no
			from member_tbl m
			left join book_tbl b on (b.member_no = m.member_no)
			left join book_seat_tbl bs on (bs.book_no = b.book_no)
			left join pay_tbl p on (p.book_seat_no = bs.book_seat_no)
			left join price_tbl pr on (pr.price_no = b.price_no)
			left join schedule_tbl s on (s.schedule_no = b.schedule_no)
			left join movie_tbl m on(m.movie_no = s.movie_no)
			left join movie_comment_tbl mc on (mc.movie_no = m.movie_no)
			left join screen_tbl sc on (sc.screen_no = s.screen_no)
			where (m.member_id=#{memberId}) and (p.refund_status = 'n') and
        			(b.booking_date between add_months(sysdate, -#{intervalChoice}) and sysdate) and 
        			(((to_number(to_char(s.schedule_time_end,'hh24'))*60)+(to_number(to_char(s.schedule_time_end,'mi')))) <= ((to_number(to_char(sysdate,'hh24'))*60)+(to_number(to_char(sysdate,'mi')))))
		 ]]>
		</if>
	</select>
	<select id="watchedCount" resultType="int">
		<if test="intervalChoice == 0">
		<![CDATA[
		select count(*) from
			(select 
    			mc.comment_content,
    			m.movie_thumb,
    			m.movie_title,
    			m.movie_grade,
    			s.schedule_time_start,
    			s.schedule_time_end,
    			sc.screen_name,
    			pr.price_per_age,
    			b.booking_date,
    			bs.book_seat_row,
    			bs.book_seat_column,
    			p.pay_no
			from member_tbl m
			left join book_tbl b on (b.member_no = m.member_no)
			left join book_seat_tbl bs on (bs.book_no = b.book_no)
			left join pay_tbl p on (p.book_seat_no = bs.book_seat_no)
			left join price_tbl pr on (pr.price_no = b.price_no)
			left join schedule_tbl s on (s.schedule_no = b.schedule_no)
			left join movie_tbl m on(m.movie_no = s.movie_no)
			left join movie_comment_tbl mc on (mc.movie_no = m.movie_no)
			left join screen_tbl sc on (sc.screen_no = s.screen_no)
			where (p.refund_status = 'n') and
        			(b.booking_date <= sysdate) and 
        			(((to_number(to_char(s.schedule_time_end,'hh24'))*60)+(to_number(to_char(s.schedule_time_end,'mi')))) <= ((to_number(to_char(sysdate,'hh24'))*60)+(to_number(to_char(sysdate,'mi'))))))
		 ]]>
		</if>
		<if test="intervalChoice == 3 || intervalChoice == 6 || intervalChoice == 9 || intervalChoice == 12">
		<![CDATA[
		select count(*) from
			(select 
    			mc.comment_content,
    			m.movie_thumb,
    			m.movie_title,
    			m.movie_grade,
    			to_char(s.schedule_time_start,'HH24:MI'),
    			to_char(s.schedule_time_end,'HH24:MI'),
    			sc.screen_name,
    			pr.price_per_age,
    			to_char(b.booking_date,'YYYY.DD.MM'),
    			bs.book_seat_row,
    			bs.book_seat_column,
    			p.pay_no
			from member_tbl m
			left join book_tbl b on (b.member_no = m.member_no)
			left join book_seat_tbl bs on (bs.book_no = b.book_no)
			left join pay_tbl p on (p.book_seat_no = bs.book_seat_no)
			left join price_tbl pr on (pr.price_no = b.price_no)
			left join schedule_tbl s on (s.schedule_no = b.schedule_no)
			left join movie_tbl m on(m.movie_no = s.movie_no)
			left join movie_comment_tbl mc on (mc.movie_no = m.movie_no)
			left join screen_tbl sc on (sc.screen_no = s.screen_no)
			where (m.member_id=#{memberId}) and (p.refund_status = 'n') and
        			(b.booking_date between add_months(sysdate, -#{intervalChoice}) and sysdate) and 
        			(((to_number(to_char(s.schedule_time_end,'hh24'))*60)+(to_number(to_char(s.schedule_time_end,'mi')))) <= ((to_number(to_char(sysdate,'hh24'))*60)+(to_number(to_char(sysdate,'mi'))))))
		 ]]>
		</if>
	</select>
	
</mapper>
